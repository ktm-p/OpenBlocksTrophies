plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.1'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

idea {
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.trophies'
base {
	archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation,-this-escape" << "-Werror"

neoForge {
	version = project.neo_version
	validateAccessTransformers = true

	runs {
		configureEach {
			gameDirectory = project.file('run')
			systemProperty 'forge.logging.console.level', 'debug'
			logLevel = org.slf4j.event.Level.DEBUG
		}

		client {
			client()
			systemProperty 'forge.enabledGameTestNamespaces', modid
			programArguments.addAll '--username', secrets.getProperty("username") ?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid") ?: ''
		}

		server {
			server()
			systemProperty 'forge.enabledGameTestNamespaces', modid
			programArgument '--nogui'
		}

		data {
			data()
			programArguments.addAll '--mod', modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
	}

	mods {
		obtrophies {
			sourceSet this.sourceSets.main
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name 'Jared\'s Maven' // JEI
		url 'https://maven.blamejared.com/'
	}
	maven {
		name 'Shedaniel\'s Maven' //REI
		url "https://maven.shedaniel.me"
	}
	maven {
		name = "TerraformersMC" //EMI
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name 'Curseforge Maven' // Jade
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url = "https://maven.tamaized.com/releases"
	}
}

dependencies {
	//make sure to only pick one of these when testing (switch others to compileOnly)
	compileOnly "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"
//	compileOnly "me.shedaniel:RoughlyEnoughItems-neoforge:${project.rei_version}"
	implementation "dev.emi:emi-neoforge:${project.emi_version}+${project.minecraft_version}"

	compileOnly "curse.maven:jade-324717:5529595"
	runtimeOnly "team-twilight:twilightforest:4.6.2582:universal"
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				"Specification-Title"     : mod_name,
				"Specification-Vendor"    : "GizmoTheMoonPig",
				"Specification-Version"   : "1",
				"Implementation-Title"    : mod_name,
				"Implementation-Version"  : project.jar.archiveVersion,
				"Implementation-Vendor"   : "GizmoTheMoonPig",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
	publications {
		create('mavenJava', MavenPublication) {
			afterEvaluate {
				artifact this.project.jar
				artifact this.project.sourceJar
			}
			groupId 'gizmo'
			artifactId this.project.modid
		}
	}
	repositories {
		maven {
			url "https://maven.tamaized.com/releases"
			credentials {
				username mavenUser
				password mavenToken
			}
		}
	}
}

tasks.register('sourceJar', Jar) {
	dependsOn 'classes'
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
